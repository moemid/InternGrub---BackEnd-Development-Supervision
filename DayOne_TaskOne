Step 1: Read the PHP PDO Documentation
•	Purpose: Gain foundational knowledge about PHP PDO, its purpose, and key features.
•	Action Item: Intern should read the following sections of the PHP PDO Documentation:
o	PHP PDO Overview: Explains what PDO is and why it is used.
o	PHP PDO Prepared Statements: Learn about using prepared statements for secure database operations.
•	What to Focus On:
o	The advantages of PDO (cross-database compatibility, prepared statements, and flexible fetch modes).
o	The structure of prepared statements in PDO compared to traditional MySQL queries.
________________________________________
Step 2: Watch a Short Introductory Video
•	Purpose: Visualize how to use PHP PDO in a practical context.
•	Video Resource:
o	PHP PDO Crash Course for Beginners – A short video (~15 minutes) covering the basics of connecting to a MySQL database with PDO, executing queries, and using prepared statements.
•	Key Takeaways:
o	How to connect to a database using PDO.
o	How to use prepared statements to safely execute SQL queries.
o	The differences between procedural MySQLi and object-oriented PDO.
________________________________________
Step 3: Research and Compare MySQLi vs PDO
•	Purpose: Understand the key differences between MySQLi and PDO, and why PDO is preferred for future-proofing projects.
•	Action Item:
o	Intern should research and write a short comparison of MySQLi vs PDO, focusing on:
	Database support (MySQLi supports only MySQL, while PDO supports many databases).
	Error handling (PDO's exception handling vs MySQLi's manual error checking).
	Object-oriented structure in PDO vs MySQLi’s mix of procedural and OOP styles.
	Prepared statements in both.
•	Suggested Reading:
o	https://phpdelusions.net/pdo/mysql_vs_mysqli
o	An article outlining the key differences.
________________________________________
Deliverables:
1.	Summary Report: Intern should submit a short summary (1-2 pages) covering:
o	The basics of PDO from the documentation.
o	Key differences between PDO and MySQLi.
o	Why PDO is commonly used in modern PHP applications.

